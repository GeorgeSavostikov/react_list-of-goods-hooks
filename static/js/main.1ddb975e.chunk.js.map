{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","QueryType","goodsFromServer","App","useState","sortField","setSortField","query","setQuery","visibleGoods","goods","preparedGoods","sort","good1","good2","alphabet","localeCompare","length","reverse","getPrepareGoods","className","type","cn","onClick","clear","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,EAMAC,E,0EAnBQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGF,K,gBAAAA,E,oBAAAA,E,UAAAA,M,cAMAC,K,SAAAA,E,mBAAAA,M,KAiCE,IAAME,EAAgB,WAC3B,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAEMC,EAhCR,SACEC,EADF,GAGG,IADCL,EACF,EADEA,UAAWE,EACb,EADaA,MAEPI,EAAa,YAAOD,GAqB1B,OAnBIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKL,EAASe,SACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKd,EAASiB,OACZ,OAAOJ,EAAMI,OAASH,EAAMG,OAE9B,QACE,OAAO,MAKXV,GACFI,EAAcO,UAGTP,EAOcQ,CACnBjB,EACA,CAAEG,YAAWE,UAGf,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,SAAU,UAAW,CACjC,WAAYjB,IAAcL,EAASe,WAErCQ,QAAS,kBAAMjB,EAAaN,EAASe,WALvC,iCAUA,wBACEM,KAAK,SACLD,UAAWE,IAAG,SAAU,aAAc,CACpC,WAAYjB,IAAcL,EAASiB,SAErCM,QAAS,kBAAMjB,EAAaN,EAASiB,SALvC,4BAUA,wBACEI,KAAK,SACLD,UAAWE,IAAG,SAAU,aAAc,CACpC,WAAYf,IAAUN,EAAUiB,UAElCK,QAAS,kBAAMf,EACbD,IAAUN,EAAUiB,QAChBjB,EAAUuB,MACVvB,EAAUiB,UARlB,sBAcEb,GAAaE,IACb,wBACEc,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPf,EAASP,EAAUuB,OACnBlB,EAAaN,EAASwB,QAL1B,sBAaJ,6BACGf,EAAagB,KAAI,SAACC,GAAD,OAChB,oBACE,UAAQ,OADV,SAIGA,GAFIA,YCtHjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.1ddb975e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  length = 'length',\n  alphabet = 'alphabet',\n  clear = '',\n}\n\nenum QueryType {\n  clear = '',\n  reverse = 'reverse',\n}\n\nfunction getPrepareGoods(\n  goods: string[],\n  { sortField, query }: { sortField: string, query: string },\n) {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortType.alphabet:\n          return good1.localeCompare(good2);\n\n        case SortType.length:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (query) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState('');\n  const [query, setQuery] = useState('');\n\n  const visibleGoods = getPrepareGoods(\n    goodsFromServer,\n    { sortField, query },\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button', 'is-info', {\n            'is-light': sortField !== SortType.alphabet,\n          })}\n          onClick={() => setSortField(SortType.alphabet)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-success', {\n            'is-light': sortField !== SortType.length,\n          })}\n          onClick={() => setSortField(SortType.length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-warning', {\n            'is-light': query !== QueryType.reverse,\n          })}\n          onClick={() => setQuery(\n            query === QueryType.reverse\n              ? QueryType.clear\n              : QueryType.reverse,\n          )}\n        >\n          Reverse\n        </button>\n\n        {(sortField || query) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setQuery(QueryType.clear);\n              setSortField(SortType.clear);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map((good: string) => (\n          <li\n            data-cy=\"Good\"\n            key={good}\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}